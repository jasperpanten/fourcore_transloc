#!/bin/python

import pandas as pd
import numpy as np
import os
import pdb

# For debugging
# pdb.set_trace()

# Call as 
# /home/panten/miniconda3/bin/snakemake -s snakefile --cluster "bsub -n16 -q verylong -R rusage[mem=200GB]"
# -j30 --use-envmodules -n

# Define parent dir
parent_dir = "/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/"

# Define temporary dir 
temp_dir = parent_dir + "tmp/"

# Give paths to references (could be in config)
reference_genome = "/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/genome_files/bowtie_n_masked/mm39_n_masked"
ref_fasta = "/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/genome_files/n_masked_genome/mm39.removechr.fa"
chr_sizes="/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/genome_files/n_masked_genome/sizes.genome"
snp_file = "/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/genome_files/SNPs_CAST_EiJ/"
snp_file = "/omics/odcf/analysis/OE0538_projects/DO-0009/f1_mcas_b6/4core_mess/genome_files/all_SNPs_CAST_EiJ_GRCm38.txt.gz"

# Output folder
output_dir = parent_dir + "output/"

# Give the paths to the data files
data_dir_1 = "data/230909_VH00211_290_AAC7GHNHV/"
data_dir_2 = "data/231007_VH00211_304_AAF3G2VM5/"
data_dir_3 = "data/231026_VH00211_307_AAC5V7JHV/"
data_dir_4 = "data/231215_VH00211_314_AAC5TYTHV/"

# Read the sample information as exported from the ODCF database image

metadata_1 = pd.read_csv(parent_dir + "/data/wgs/metadata.csv")
metadata_2 = pd.read_csv(parent_dir + "/data/wgs/metadata_2.csv")
metadata_3 = pd.read_csv(parent_dir + "/data/wgs/metadata_3.csv")
metadata_4 = pd.read_csv(parent_dir + "/data/wgs/metadata_4.csv")

#metadata = pd.read_csv(parent_dir + "data/metadata_test.csv")
sample_list_lane1 = [i for i in metadata_1.Sample]
sample_list_lane2 = [i for i in metadata_2.Sample]
sample_list_lane3 = [i for i in metadata_3.Sample]
sample_list_lane4 = [i for i in metadata_4.Sample]

sample_list = np.concatenate([sample_list_lane1, sample_list_lane2, sample_list_lane3, sample_list_lane4])
data_path_per_sample = { i : "230909_VH00211_290_AAC7GHNHV" for i in sample_list_lane1 } | { i :
"231007_VH00211_304_AAF3G2VM5" for i in sample_list_lane2} | {i : "231026_VH00211_307_AAC5V7JHV" for i in
        sample_list_lane3} | { i : "231215_VH00211_314_AAC5TYTHV" for i in sample_list_lane4 }

all_targets = [ output_dir + i + "/aligned/" + i + ".sorted.markdup.resorted.genome1.bam" for i in sample_list ]

print(all_targets)

rule all:
    input:
        expand(output_dir + "{sample}/aligned/{sample}.sorted.markdup.resorted.{genome}.bam", genome = ["genome1",
            "genome2"], sample = sample_list)

# Create a folder linked_files, create one folder per sample in there which contains links to all sample fastqs
rule link_file1:
    output: output_dir + "{sample}/reads/{sample}_R1.fastq.gz"
    params: 
        fastq_dir = lambda wildcards: output_dir + wildcards.sample + "/reads/",
        fastq_input_file = lambda wildcards: parent_dir + "data/wgs/" + data_path_per_sample[wildcards.sample] + "/" + wildcards.sample + "/fastq/" + wildcards.sample + "_R1.fastq.gz"
    shell:
        """
        mkdir -p {params.fastq_dir}
        ln -sf {params.fastq_input_file} {output}
        """
rule link_file2:
    output: output_dir + "{sample}/reads/{sample}_R2.fastq.gz"
    params: 
        fastq_dir = lambda wildcards: output_dir + wildcards.sample + "/reads/",
        fastq_input_file = lambda wildcards: parent_dir + "data/wgs/" + data_path_per_sample[wildcards.sample] + "/" + wildcards.sample + "/fastq/" + wildcards.sample + "_R2.fastq.gz"
    shell:
        """
        mkdir -p {params.fastq_dir}
        ln -sf {params.fastq_input_file} {output}
        """

rule trim_reads:
    input:
        read1 = output_dir + "{sample}/reads/{sample}_R1.fastq.gz",
        read2 = output_dir + "{sample}/reads/{sample}_R2.fastq.gz"
    output:
        expand(output_dir + "{{sample}}/trimmed/{{sample}}_R{read}_val_{read}.fq.gz", read=["1", "2"])
    params:
        output_dir = output_dir + "{sample}/trimmed/"
    shell:
        """
        mkdir -p {params.output_dir}
        /omics/groups/OE0538/internal/users/p281o/programs/TrimGalore-0.6.6/trim_galore --paired \
            --three_prime_clip_R1 1 \
            --three_prime_clip_R2 1 \
            --fastqc \
            --cores 8 \
            --stringency 3 \
            -o {params.output_dir} \
            --path_to_cutadapt /home/panten/miniconda3/bin/cutadapt \
            {input.read1} {input.read2}
        """

rule align_reads:
    input:
        read1 = output_dir + "{sample}/trimmed/{sample}_R1_val_1.fq.gz",
        read2 = output_dir + "{sample}/trimmed/{sample}_R2_val_2.fq.gz"
    output:
        output_dir + "{sample}/aligned/{sample}.sam"
    params:
        aligned_dir = output_dir + "{sample}/aligned/",
        genome = reference_genome
    envmodules:
        "bowtie2/2.3.5.1"
    shell:
        """
        mkdir -p {params.aligned_dir}
        bowtie2 -p 10 -x {params.genome} -1 {input.read1} -2 {input.read2} -S {output}
        """

rule process_bam:
    input: output_dir + "{sample}/aligned/{sample}.sam"
    output: output_dir + "{sample}/aligned/{sample}.sorted.bam"
    envmodules:
        "samtools"
    shell:
        """
        samtools sort {input} -o {input}.sorted.bam
        mv {input}.sorted.bam {output}
        samtools index {output}
        """

rule markdups:
    input: output_dir + "{sample}/aligned/{sample}.sorted.bam"
    output: output_dir + "{sample}/aligned/{sample}.sorted.markdup.bam"
    params:
        temp_dir = lambda wc: temp_dir + wc.get("sample")
    envmodules:
        "samtools/1.15.1"
    shell:
        """
        samtools collate -o {input}.collate {input} {params.temp_dir}
        samtools fixmate -m {input}.collate {input}.fixmate
        samtools sort -o {input}.sort {input}.fixmate
        samtools markdup -r {input}.sort {output}
        rm {input}.collate
        rm {input}.fixmate
        rm {input}.sort
        samtools index {output}
        """

rule snpsplit:
    input: output_dir + "{sample}/aligned/{sample}.sorted.markdup.bam"
    output: expand(output_dir + "{{sample}}/aligned/{{sample}}.sorted.markdup.{genotype}.bam", genotype=["genome1", "genome2", "unassigned"])
    params: 
        snp_dir = snp_file,
        split_dir = output_dir + "{sample}/aligned/"
    envmodules:
        "samtools/1.15.1"
    shell:
        """
        ~/miniconda3/envs/bulk_allelic_nextflow/bin/SNPsplit \
            --snp_file {params.snp_dir} \
            -o {params.split_dir} \
            {input}
        """

rule process_allelic_bam:
        input: output_dir + "{sample}/aligned/{sample}.sorted.markdup.{genotype}.bam"
        output: output_dir + "{sample}/aligned/{sample}.sorted.markdup.resorted.{genotype}.bam"
        envmodules:
            "samtools/1.15.1"
        shell:
            """
            samtools sort -o {output} {input}
            samtools index {output}
            """
